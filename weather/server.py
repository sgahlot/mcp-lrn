#!/usr/bin/env python3
"""
Weather MCP Server

This server provides tools to retrieve weather information from weatherapi.com
"""

# -----------------------------------------------------------------------------
# NOTE: This code was initially generated by Cursor AI and then modified manually.
# -----------------------------------------------------------------------------

import asyncio
import os
import logging
from typing import Dict, Any, List, Optional

import httpx
from mcp.server.fastmcp import FastMCP

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("weather-server")

# Weather API configuration
WEATHER_API_BASE_URL = "https://api.weatherapi.com/v1"
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY", "")
MAX_DAYS_FORECAST = 3

# Create FastMCP server instance
mcp = FastMCP(name="Weather MCP Server")

# Global HTTP client
http_client = httpx.AsyncClient(timeout=30.0)


# -----------------------
# Tools (functions exposed to the client)
# -----------------------


@mcp.tool()
async def get_current_weather(location: str) -> str:
  """
  Get current weather information for a location.

  Args:
    location: The city name, coordinates, or location to get weather for

  Returns:
    Current weather information including temperature, conditions, and more
  """
  if not WEATHER_API_KEY:
    return (
      "Error: WEATHER_API_KEY environment variable not set. Please set your weatherapi.com API key."
    )

  try:
    params = {"key": WEATHER_API_KEY, "q": location, "aqi": "yes"}  # Include air quality data

    url = f"{WEATHER_API_BASE_URL}/current.json"
    response = await http_client.get(url, params=params)
    response.raise_for_status()

    data = response.json()

    # Format the weather data
    current = data["current"]
    location_info = data["location"]

    weather_info = f"""🌤️ **Current Weather for {location_info['name']}, {location_info['country']}**
          📍 **Location**: {location_info['name']}, {location_info['region']}, {location_info['country']}
          🕒 **Local Time**: {location_info['localtime']}
          🌡️ **Temperature**: {current['temp_c']}°C ({current['temp_f']}°F)
          🌡️ **Feels Like**: {current['feelslike_c']}°C ({current['feelslike_f']}°F)
          ☁️ **Condition**: {current['condition']['text']}
          💨 **Wind**: {current['wind_kph']} km/h ({current['wind_mph']} mph) {current['wind_dir']}
          💧 **Humidity**: {current['humidity']}%
          👁️ **Visibility**: {current['vis_km']} km ({current['vis_miles']} miles)
          🌊 **Pressure**: {current['pressure_mb']} mb ({current['pressure_in']} in)
          ☔ **Precipitation**: {current['precip_mm']} mm ({current['precip_in']} in)
          🌡️ **Heat Index**: {current['heatindex_c']}°C ({current['heatindex_f']}°F)
          ❄️ **Wind Chill**: {current['windchill_c']}°C ({current['windchill_f']}°F)
          ☀️ **UV Index**: {current['uv']}
        """

    # Add air quality if available
    if "air_quality" in data:
      aqi = data["air_quality"]
      weather_info += f"\n🌫️ **Air Quality**:\n"
      weather_info += f"   • CO: {aqi.get('co', 'N/A')} μg/m³\n"
      weather_info += f"   • NO2: {aqi.get('no2', 'N/A')} μg/m³\n"
      weather_info += f"   • O3: {aqi.get('o3', 'N/A')} μg/m³\n"
      weather_info += f"   • PM2.5: {aqi.get('pm2_5', 'N/A')} μg/m³\n"
      weather_info += f"   • PM10: {aqi.get('pm10', 'N/A')} μg/m³\n"
      weather_info += f"   • SO2: {aqi.get('so2', 'N/A')} μg/m³\n"

    return weather_info

  except httpx.HTTPStatusError as e:
    error_msg = f"HTTP Error {e.response.status_code}: {e.response.text}"
    return f"Error fetching weather data: {error_msg}"
  except Exception as e:
    return f"Error fetching weather data: {str(e)}"


@mcp.tool()
async def get_weather_forecast(location: str, days: int = 3) -> str:
  """
  Get weather forecast for a location.

  Args:
    location: The city name, coordinates, or location to get forecast for
    days: Number of days to forecast (1-3, default: 3)

  Returns:
    Weather forecast information for the specified number of days
  """
  if not WEATHER_API_KEY:
    return (
      "Error: WEATHER_API_KEY environment variable not set. Please set your weatherapi.com API key."
    )

  # Validate days parameter
  if days < 1 or days > MAX_DAYS_FORECAST:
    return f"Error: Days parameter must be between 1 and {MAX_DAYS_FORECAST}"

  try:
    params = {"key": WEATHER_API_KEY, "q": location, "days": days, "aqi": "yes", "alerts": "yes"}

    url = f"{WEATHER_API_BASE_URL}/forecast.json"
    response = await http_client.get(url, params=params)
    response.raise_for_status()

    data = response.json()

    # Format the forecast data
    location_info = data["location"]
    forecast_info = (
      f"🌤️ **Weather Forecast for {location_info['name']}, {location_info['country']}**\n\n"
    )

    for day in data["forecast"]["forecastday"]:
      date = day["date"]
      day_data = day["day"]

      forecast_info += f"📅 **{date}**\n"
      forecast_info += f"   🌡️ **Temperature**: {day_data['mintemp_c']}°C to {day_data['maxtemp_c']}°C ({day_data['mintemp_f']}°F to {day_data['maxtemp_f']}°F)\n"
      forecast_info += (
        f"   🌡️ **Avg Temperature**: {day_data['avgtemp_c']}°C ({day_data['avgtemp_f']}°F)\n"
      )
      forecast_info += f"   ☁️ **Condition**: {day_data['condition']['text']}\n"
      forecast_info += (
        f"   💨 **Max Wind**: {day_data['maxwind_kph']} km/h ({day_data['maxwind_mph']} mph)\n"
      )
      forecast_info += f"   💧 **Humidity**: {day_data['avghumidity']}%\n"
      forecast_info += (
        f"   👁️ **Visibility**: {day_data['avgvis_km']} km ({day_data['avgvis_miles']} miles)\n"
      )
      forecast_info += f"   ☔ **Precipitation**: {day_data['totalprecip_mm']} mm ({day_data['totalprecip_in']} in)\n"
      forecast_info += f"   ☀️ **UV Index**: {day_data['uv']}\n"
      forecast_info += f"   🌅 **Sunrise**: {day['astro']['sunrise']}\n"
      forecast_info += f"   🌇 **Sunset**: {day['astro']['sunset']}\n"
      forecast_info += f"   🌙 **Moon Phase**: {day['astro']['moon_phase']}\n\n"

    # Add alerts if available
    if "alerts" in data and data["alerts"]["alert"]:
      forecast_info += "⚠️ **Weather Alerts**:\n"
      for alert in data["alerts"]["alert"]:
        forecast_info += f"   • **{alert['headline']}**: {alert['desc']}\n"

    return forecast_info

  except httpx.HTTPStatusError as e:
    error_msg = f"HTTP Error {e.response.status_code}: {e.response.text}"
    return f"Error fetching forecast data: {error_msg}"
  except Exception as e:
    return f"Error fetching forecast data: {str(e)}"


@mcp.tool()
async def search_locations(query: str) -> str:
  """
  Search for locations/cities matching a query.

  Args:
    query: The search query (city name, coordinates, etc.)

  Returns:
    List of matching locations with their details
  """
  if not WEATHER_API_KEY:
    return (
      "Error: WEATHER_API_KEY environment variable not set. Please set your weatherapi.com API key."
    )

  try:
    params = {"key": WEATHER_API_KEY, "q": query}

    url = f"{WEATHER_API_BASE_URL}/search.json"
    response = await http_client.get(url, params=params)
    response.raise_for_status()

    data = response.json()

    if not data:
      return f"No locations found matching '{query}'"

    # Format the search results
    search_info = f"🔍 **Search Results for '{query}'**\n\n"

    for i, location in enumerate(data, 1):
      search_info += f"**{i}. {location['name']}**\n"
      search_info += f"   📍 **Region**: {location['region']}\n"
      search_info += f"   🌍 **Country**: {location['country']}\n"
      search_info += f"   📍 **Coordinates**: {location['lat']}, {location['lon']}\n"
      if "url" in location:
        search_info += f"   🔗 **URL**: {location['url']}\n"
      search_info += "\n"

    return search_info

  except httpx.HTTPStatusError as e:
    error_msg = f"HTTP Error {e.response.status_code}: {e.response.text}"
    return f"Error searching locations: {error_msg}"
  except Exception as e:
    return f"Error searching locations: {str(e)}"


# Log tool registration
logger.info("Weather tools registered: get_current_weather, search_locations")

# -----------------------
# Resources (expose data via a URI)
# -----------------------


@mcp.resource("weather://info")
async def get_weather_info() -> str:
  """Information about the weather server and API usage."""

  return f"""# Weather MCP Server

    This server provides weather information using the WeatherAPI.com service.

    ## Available Tools:
    - **get_current_weather**: Get current weather for a location
    - **get_weather_forecast**: Get weather forecast (1-{MAX_DAYS_FORECAST} days)
    - **search_locations**: Search for locations/cities

    ## Setup:
    1. Get a free API key from https://www.weatherapi.com/
    2. Set the WEATHER_API_KEY environment variable
    3. Use the tools to get weather information

    ## Example Usage:
    - Current weather: "Get current weather for London"
    - Forecast: "Get 5-day forecast for New York"
    - Search: "Find locations matching 'Paris'"

    ## API Limits:
    - Free tier: 1 million calls/month
    - Forecast: Up to {MAX_DAYS_FORECAST} days
    - Historical data: Available with paid plans
  """


logger.info("Weather resource registered: weather://info")

# -----------------------
# Cleanup on exit
# -----------------------


async def cleanup():
  """Clean up resources on exit."""
  await http_client.aclose()


if __name__ == "__main__":
  logger.info(f"\n--- Starting {mcp} via __main__ ---")
  try:
    mcp.run(transport="stdio")
  finally:
    # Clean up HTTP client
    asyncio.run(cleanup())
